def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]

pipeline {
    agent none

    environment {
        // Common tools
        MAVEN_HOME = tool 'MAVEN3'
        JAVA_HOME  = tool 'OracleJDK11'
        SCANNER_HOME = tool 'sonar4.7'

        // Git details
        GIT_URL = 'https://github.com/hkhcoder/vprofile-project.git'
        GIT_BRANCH = 'main'

        // SonarQube setup
        SONAR_ENV = 'sonar'
        SONAR_PROJECT_KEY = 'vprofile'
        SONAR_PROJECT_NAME = 'vprofile'
        SONAR_PROJECT_VERSION = '1.0'

        // Nexus details
        NEXUS_URL = '54.152.148.216:8081'
        NEXUS_REPO = 'vprofile-repo'
        NEXUS_CREDENTIALS = 'nexuslogin'
        NEXUS_GROUP_ID = 'QA'
        ARTIFACT_NAME = 'vproapp'
        ARTIFACT_FILE = 'target/vprofile-v2.war'

        // Slack
        SLACK_CHANNEL = '#ci-cd'
    }

    tools {
        maven "MAVEN3"
        jdk "OracleJDK11"
    }

    stages {

        stage('Print error') {
            agent { label 'master' }
            steps {
                script {
                    try {
                        sh 'fake comment'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        echo "Error: ${e.message}"
                    }
                }
            }
        }

        stage('Fetch code') {
            agent { label 'git-agent' }
            steps {
                retry(3) {
                    git branch: "${GIT_BRANCH}", url: "${GIT_URL}"
                }
            }
        }

        stage('Build') {
            agent { label 'build-agent' }
            steps {
                retry(3) {
                    sh "${MAVEN_HOME}/bin/mvn clean install -DskipTests"
                }
            }
            post {
                success {
                    echo "Archiving build artifacts..."
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test') {
            agent { label 'test-agent' }
            steps {
                retry(2) {
                    sh "${MAVEN_HOME}/bin/mvn test"
                }
            }
        }

        stage('Checkstyle Analysis') {
            agent { label 'qa-agent' }
            steps {
                retry(2) {
                    sh "${MAVEN_HOME}/bin/mvn checkstyle:checkstyle"
                }
            }
        }

        stage('Sonar Analysis') {
            agent { label 'sonar-agent' }
            steps {
                retry(2) {
                    withSonarQubeEnv("${SONAR_ENV}") {
                        sh """
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                            -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} \
                            -Dsonar.sources=src/ \
                            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                            -Dsonar.junit.reportsPath=target/surefire-reports/ \
                            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                        """
                    }
                }
            }
        }

        stage('Quality Gate') {
            agent { label 'sonar-agent' }
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Upload Artifact') {
            agent { label 'deploy-agent' }
            steps {
                retry(3) {
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: "${NEXUS_URL}",
                        groupId: "${NEXUS_GROUP_ID}",
                        version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                        repository: "${NEXUS_REPO}",
                        credentialsId: "${NEXUS_CREDENTIALS}",
                        artifacts: [
                            [artifactId: "${ARTIFACT_NAME}",
                             classifier: '',
                             file: "${ARTIFACT_FILE}",
                             type: 'war']
                        ]
                    )
                }
            }
        }
    }

    post {
        always {
            echo 'Sending Slack notification...'
            slackSend(
                channel: "${SLACK_CHANNEL}",
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nMore info at: ${env.BUILD_URL}"
            )
        }
    }
}
