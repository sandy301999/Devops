def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]

pipeline {
    agent none   // define globally as none, each stage chooses its own agent

    tools {
        maven "MAVEN3"
        jdk "OracleJDK11"
    }

    stages {

        stage('Print error') {
            agent { label 'master' }
            steps {
                script {
                    try {
                        sh 'fake comment'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        echo "Error: ${e.message}"
                    }
                }
            }
        }

        stage('Fetch code') {
            agent { label 'git-agent' }
            steps {
                retry(3) {
                    git branch: 'main', url: 'https://github.com/hkhcoder/vprofile-project.git'
                }
            }
        }

        stage('Build') {
            agent { label 'build-agent' }
            steps {
                retry(3) {
                    sh 'mvn clean install -DskipTests'
                }
            }
            post {
                success {
                    echo "Now Archiving."
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test') {
            agent { label 'test-agent' }
            steps {
                retry(2) {
                    sh 'mvn test'
                }
            }
        }

        stage('Checkstyle Analysis') {
            agent { label 'qa-agent' }
            steps {
                retry(2) {
                    sh 'mvn checkstyle:checkstyle'
                }
            }
        }

        stage('Sonar Analysis') {
            agent { label 'sonar-agent' }
            environment {
                scannerHome = tool 'sonar4.7'
            }
            steps {
                retry(2) {
                    withSonarQubeEnv('sonar') {
                        sh '''${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=vprofile \
                            -Dsonar.projectName=vprofile \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sources=src/ \
                            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                            -Dsonar.junit.reportsPath=target/surefire-reports/ \
                            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                    }
                }
            }
        }

        stage('Quality Gate') {
            agent { label 'sonar-agent' }
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('UploadArtifact') {
            agent { label 'deploy-agent' }
            steps {
                retry(3) {
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: '54.152.148.216:8081',
                        groupId: 'QA',
                        version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                        repository: 'vprofile-repo',
                        credentialsId: 'nexuslogin',
                        artifacts: [
                            [artifactId: 'vproapp',
                             classifier: '',
                             file: 'target/vprofile-v2.war',
                             type: 'war']
                        ]
                    )
                }
            }
        }
    }

    post {
        always {
            echo 'Slack Notifications.'
            slackSend channel: '#ci-cd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
