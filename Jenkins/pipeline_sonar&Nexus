withCredentials([sshUserPrivateKey(credentialId: 'name_ex', keyFileVariable: 'SSH_KEY')])
withCredentials([usernamePassword(credentialId:"name", usernameVariable: "nex_id", passwordVariable: "nex_pass")])

def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
    'UNSTABLE': 'warning'
]

pipeline {
    agent none

    environment {
        MAVEN_HOME = tool 'MAVEN3'
        JAVA_HOME = tool 'JDK11'
        SLACK_CHANNEL = '#ci-cd'
        AWS_REGION = 'ap-south-1'
        ECR_REPO = '123456789012.dkr.ecr.ap-south-1.amazonaws.com/devops-app'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        K8S_DEPLOYMENT = 'devops-app'
        K8S_NAMESPACE = 'production'
    }

    stages {
        stage('Fetch Code') {
            agent { label 'master' }
            steps {
                retry(3) {
                    git branch: 'main', url: 'https://github.com/sandy/devops.git'
                }
            }
        }

        stage('Build Code') {
            agent { label 'master' }
            steps {
                script {
                    try {
                        sh "${MAVEN_HOME}/bin/mvn clean install -DskipTests"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        echo "Error: ${e.message}"
                        error("Build failed")
                    }
                }
            }
        }

        stage('Docker Build & Push to ECR') {
            agent { label 'docker-agent' }
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-cred-id'
                    ]]) {
                        sh """
                            echo "Logging in to Amazon ECR..."
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}

                            echo "Building Docker image..."
                            docker build -t ${ECR_REPO}:${IMAGE_TAG} -f Dockerfile .

                            echo "Pushing Docker image..."
                            docker push ${ECR_REPO}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy to ECS') {
            agent { label 'ecs-agent' }
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-cred-id'
                    ]]) {
                        sh """
                            echo "Updating ECS Service..."
                            aws ecs update-service \
                                --cluster devops-cluster \
                                --service devops-service \
                                --force-new-deployment \
                                --region ${AWS_REGION}
                        """
                    }
                }
            }
        }

        stage('Kubernetes Deployment') {
            agent { label 'k8s-agent' }
            steps {
                script {
                    withCredentials([kubeconfigFile(credentialsId: 'kubeconfig-cred-id', variable: 'KUBECONFIG')]) {
                        sh """
                            echo "Deploying to Kubernetes..."
                            kubectl set image deployment/${K8S_DEPLOYMENT} ${K8S_DEPLOYMENT}=${ECR_REPO}:${IMAGE_TAG} -n ${K8S_NAMESPACE}
                            kubectl rollout status deployment/${K8S_DEPLOYMENT} -n ${K8S_NAMESPACE}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Build & Deployment Successful!'
            slackSend(
                channel: "${SLACK_CHANNEL}",
                color: COLOR_MAP['SUCCESS'],
                message: "*SUCCESS:* Job `${env.JOB_NAME}` build `${env.BUILD_NUMBER}`\n<${env.BUILD_URL}|View Job Details>"
            )
        }

        failure {
            echo '‚ùå Build Failed!'
            slackSend(
                channel: "${SLACK_CHANNEL}",
                color: COLOR_MAP['FAILURE'],
                message: "*FAILURE:* Job `${env.JOB_NAME}` build `${env.BUILD_NUMBER}`\n<${env.BUILD_URL}|View Job Details>"
            )
        }

        always {
            echo 'üìò Cleaning up workspace...'
            cleanWs()
        }
    }
}
